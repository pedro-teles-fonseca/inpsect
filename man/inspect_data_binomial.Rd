% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inspect_data_.R
\name{inspect_data_binomial}
\alias{inspect_data_binomial}
\title{Validate Binomial data}
\usage{
inspect_data_binomial(data, success, warning_nas = FALSE)
}
\arguments{
\item{data, success}{Arbitrary objects. \code{success} is meant to indicate the value of \code{data} that corresponds to a success.}

\item{warning_nas}{Logical vector of \code{\link[base]{length}} 1. If \code{TRUE} then the presence of \code{NA} or \code{NaN} values in \code{data} generates a warning.}
}
\value{
\code{inspect_data_binomial} does not return any output. There are three possible outcomes:
\itemize{
\item The call is silent if:
\itemize{
\item \code{data} is eligible to have been generated by a Binomial distribution and there are no \code{NA} or \code{NaN} values in \code{data}
\item \code{data} is eligible to have been generated by a Binomial distribution, there are some \code{NA} or \code{NaN} values in \code{data} and \code{warning_nas} is set to \code{FALSE}.
}
\item An informative warning message is thrown if:
\itemize{
\item \code{data} is eligible to have been generated by a Binomial distribution, there are some \code{NA} or \code{NaN} values in \code{data} and \code{warning_nas} is set to \code{TRUE}.
\item \code{data} is eligible to have been generated by a Binomial distribution and \code{success} is not observed in \code{data}.
}
\item An informative error message is thrown and the execution is stopped if \code{data} is not eligible to have been generated by a Binomial distribution.
}
}
\description{
\code{inspect_data_binomial} checks if an object contains data that is eligible to have been generated by a Binomial distribution. This can be useful to validate inputs in user-defined functions.
}
\details{
\code{inspect_data_binomial} conducts a series of tests to check if \code{data} is eligible to have been generated by a Binomial distribution. Namely, \code{inspect_data_binomial} checks if:
\itemize{
\item \code{data} and \code{success} are \code{NULL} or empty.
\item \code{data} and \code{success} are atomic and have an eligible data type (logical, integer, double, character).
\item \code{data} has \code{NA} or \code{NaN} values.
\item The number of levels is adequate.
\item \code{success} has \code{\link[base]{length}} 1.
\item \code{success} is \code{NA} or \code{NaN}.
\item \code{success} is observed in \code{data}.
}
}
\examples{
# Calls that pass silently:
x1 <- c(1, 0, 0, 1, 0)
x2 <- c(FALSE, FALSE, TRUE)
x3 <- c("yes", "no", "yes")
x4 <- factor(c("yes", "no", "yes"))
x5 <- c(1, 0, 0, 1, 0, NA)
inspect_data_binomial(x1, success = 1)
inspect_data_binomial(x2, success = TRUE)
inspect_data_binomial(x3, success = "yes")
inspect_data_binomial(x4, success = "yes")
inspect_data_binomial(x5, success = 1)
inspect_data_binomial(x5, success = 1, warning_nas = FALSE)

# Calls that throw an informative warning message:
\dontrun{y1 <- c(1, 1, NA, 0, 0)}
\dontrun{y2 <- c(0, 0)}
\dontrun{inspect_data_binomial(y1, success = 1, warning_nas = TRUE)}
\dontrun{inspect_data_binomial(y2, success = 1)}

# Calls that throw an informative error message:
\dontrun{inspect_data_binomial(NULL, 1)}
\dontrun{inspect_data_binomial(c(1,0), NULL)}
\dontrun{inspect_data_binomial(list(1,0), 1)}
\dontrun{inspect_data_binomial(c(1,0), list(1))}
\dontrun{inspect_data_binomial(numeric(0), 0)}
\dontrun{inspect_data_binomial(1, numeric(0))}
\dontrun{inspect_data_binomial(NaN, 1)}
\dontrun{inspect_data_binomial(NA, 1)}
\dontrun{inspect_data_binomial(c(1,0), NA)}
\dontrun{inspect_data_binomial(c(1,0), NaN)}
\dontrun{inspect_data_binomial(c(1,0), 2)}

}
